'''
@author Alex Hakesley 16011419

feature engineering helper module.

creates a number of features from system inputs, including 
public holidays and additional properties of date, such as day,
month, year, etc...

'''

from pandas.tseries.holiday import (AbstractHolidayCalendar, Holiday, DateOffset, EasterMonday, GoodFriday, MO, next_monday, 
    next_monday_or_tuesday)
import numpy as np
import pandas as pd
from datetime import datetime as dt

# calculates and stores relevant public holidays
class EnglandWalesHolidays(AbstractHolidayCalendar):
    rules = [
        Holiday("New Year's Day", month=1, day=1, observance=next_monday),
        GoodFriday,
        EasterMonday,
        Holiday("Early May Bank Holiday", month=5, day=1, offset=DateOffset(weekday=MO(1))),
        Holiday("Spring Bank Holiday", month=5, day=31, offset=DateOffset(weekday=MO(-1))),
        Holiday("Summer Bank Holiday", month=8, day=1, offset=DateOffset(weekday=MO(-1))),
        Holiday("Christmas Day", month=12, day=25, observance=next_monday),
        Holiday("Boxing Day", month=12, day=26, observance=next_monday_or_tuesday),
    ]

# create further features from input data
def engineer_features(df):
    df['date'] = pd.to_datetime(df['date'])

    if 'revenue' in df.columns:
        df['open'] = (df['revenue'] > 0).astype(int)
    else:
        df['open'] = (df['open']).astype(int)

    # duplicate last row as padding so 'workTomorrow' can be correctly calculated
    df = pd.concat((df, df.iloc[-1:]))
    df.iloc[-1, df.columns.get_loc('date')] += DateOffset(days=1)

    # get date features
    date = df['date']
    df['day'] = date.dt.day
    df['month'] = date.dt.month
    df['quarter'] = date.dt.quarter
    df['year'] = date.dt.year
    df['dayOfWeek'] = date.dt.weekday + 1    

    # populate public holidays column with dates generated by EnglandWalesHolidays class
    holidays = EnglandWalesHolidays().holidays(start=df['date'].min(), end=df['date'].max())
    df['publicHoliday'] = np.where(df['date'].isin(holidays), 1, 0)

    df['weekend'] = np.where(df['dayOfWeek'].isin([6, 7]), 1, 0)
    df['workingDay'] = (((df['weekend']!=1) & (df['publicHoliday']!=1))).astype(int)
    df['workTomorrow'] = df['workingDay'].shift(-1, fill_value=1)
    df['sunsetToMidnight'] = df['sunset'].apply(lambda x: ((dt(1900, 1, 2, 0, 0, 0)) - x).total_seconds()/60)

    # remove unnecessary columns
    df = df.drop(['sunrise', 'sunset', 'date'], axis=1)

    # remove padding row
    df = df.head(-1)

    return df

